const vs =
    "\nprecision mediump float;\n\n// default mandatory variables\nattribute vec3 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat4 uMVMatrix;\nuniform mat4 uPMatrix;\n\nuniform mat4 planeTextureMatrix;\n\n// custom variables\nvarying vec3 vVertexPosition;\nvarying vec2 vTextureMatrixCoord;\n\nvoid main() {\n\n    vec3 vertexPosition = aVertexPosition;\n\n    gl_Position = uPMatrix * uMVMatrix * vec4(vertexPosition, 1.0);\n\n    // varyings\n    vVertexPosition = vertexPosition;\n    vTextureMatrixCoord = (planeTextureMatrix * vec4(aTextureCoord, 0.0, 1.0)).xy;\n}\n",
  fs =
    "\nprecision mediump float;\n\nvarying vec3 vVertexPosition;\nvarying vec2 vTextureMatrixCoord;\n\nuniform sampler2D planeTexture;\n\nvoid main() {\n    // just display our texture\n    gl_FragColor = texture2D(planeTexture, vTextureMatrixCoord);\n}\n";
const rotationFs =
  "\n        precision mediump float;\n    \n        varying vec3 vVertexPosition;\n        varying vec2 vTextureCoord;\n    \n        uniform sampler2D uRenderTexture;\n    \n        uniform float uRotationEffect;\n    \n        void main() {\n            vec2 textCoords = vTextureCoord;\n    \n            // calculate an effect that spreads from the left-center point\n            float rgbEffect = uRotationEffect * distance(textCoords, vec2(0.0, 0.5));\n    \n            // apply a simple rgb shift based on that effect\n            vec4 red = texture2D(uRenderTexture, textCoords + rgbEffect * 0.005);\n            vec4 green = texture2D(uRenderTexture, vTextureCoord);\n            vec4 blue = texture2D(uRenderTexture, vTextureCoord + rgbEffect * -0.005);\n    \n            // use green channel alpha as this one does not have any displacement\n            gl_FragColor = vec4(red.r, green.g, blue.b, green.a);\n        }\n    ";
